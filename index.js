const { TelegramBot }= require('telegramsjs');
const { gameOptions, againOptions } = require('./options');
const { CreateStorage } = require('database-sempai');
const test = require('telegramsjs');

const bot = new TelegramBot('');

const db = new CreateStorage({
  path: 'database',
  table: ['chatId']
});

const chats = {};

const startGame = async (chatId) => {
    await bot.sendMessage({
      chatId: chatId,
      text: `–ó–∞—Ä–∞–∑ —è –∑–∞–≥–∞–¥–∞—é —á–∏—Å–ª–æ –≤—ñ–¥ 0 –¥–æ 9, –∞ —Ç–∏ –º—É—Å–∏—à —ó—ó –≤–≥–∞–¥–∞—Ç–∏!`
    });
    const randomNumber = Math.floor(Math.random() * 10);
    chats[chatId] = randomNumber;
    console.log(chats);
    await bot.sendMessage({
      chatId: chatId,
      text: '–í–≥–∞–¥–∞–π –∑–∞–≥–∞–¥–∞–Ω–µ —á–∏—Å–ª–æ',
      replyMarkup: gameOptions
    });
}

bot.on('ready', (client) => {
  client.setCommands({
    commands: JSON.stringify([
      {command: '/start', description: '–ü–æ—á–∞—Ç–∫–æ–≤–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è'},
      {command: '/info', description: '–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞'},
      {command: '/game', description: '–ì—Ä–∞ –≤–≥–∞–¥–∞–π —á–∏—Å–ª–æ'}
      ])
  })
  console.log(`–ë–æ—Ç –∑–∞–ø—É—Å—Ç–∏–≤—Å—è @${client.username}`);
})

bot.on('message', async msg => {
  const text = msg.text;
  const chatId = msg.chat.id;
  const message_Id = msg.message_id;
  const username = msg.from.username ? `@${msg.from.username}` : msg.from.first_name;
  try {
    if (text === '/start') {
      await db.has('chatId', chatId) ? db.set('chatId', chatId, chatId) : undefined;
      await bot.sendSticker({
        chatId: chatId,
        sticker: 'https://tlgrm.ru/_/stickers/ea5/382/ea53826d-c192-376a-b766-e5abc535f1c9/7.webp'
      })
      return await msg.reply(`
–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –Ω–∞—à–æ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ –¥–ª—è –≥—Ä–∏ —É –≤–≥–∞–¥—É–≤–∞–Ω–Ω—è —á–∏—Å–µ–ª! ü§ñüéÆ

–¢—É—Ç –≤–∏ –∑–º–æ–∂–µ—Ç–µ –Ω–∞—Å–æ–ª–æ–¥–∂—É–≤–∞—Ç–∏—Å—è –∑–∞—Ö–æ–ø–ª–∏–≤–æ—é –≥—Ä–æ—é, –¥–µ –≤–∞—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è - –≤–≥–∞–¥–∞—Ç–∏ —á–∏—Å–ª–æ –≤—ñ–¥ 0 –¥–æ 9. –£–¥–∞—á—ñ! ü§û `);
    }
    if (text === '/info') {
      const loss = db.get('chatId', `${chatId}_loss`) ?? 0;
      const win = db.get('chatId', `${chatId}_win`) ?? 0;
      return msg.reply(`–¢–µ–±–µ –∑–≤–∞—Ç–∏ ${username}, —É –≥—Ä—ñ —É —Ç–µ–±–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π ${win}, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö ${loss}`);
    }
    if (text === '/game') {
      return startGame(chatId);
    }
    return msg.reply('–Ø —Ç–µ–±–µ –Ω–µ —Ä–æ–∑—É–º—ñ—é, —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!');
  } catch (e) {
    return msg.reply('–í—ñ–¥–±—É–ª–∞—Å—è —è–∫–∞—Å—å –ø–æ–º–∏–ª–∫–∞!)');
  }
})

bot.on('callback_query', async msg => {
  console.log(msg);
  msg.deferUpdate();
  const data = msg.data;
  const chatId = msg.from.id;
  const username = msg.from?.username ? `@${msg.from.username}` : msg.from.first_name;
  if (data === '/again') {
    return startGame(chatId);
  }
  const loss = await db.get('chatId', `${chatId}_loss`) ?? 0;
  const win = await db.get('chatId', `${chatId}_win`) ?? 0;
  if (chats[chatId] == undefined) {
      msg.reply(`${username}, –≤–∏ –∑–∞–∫—ñ–Ω—á–∏–ª–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—é –≥—Ä—É, —Ç–æ–º—É –ø–æ—á–Ω—ñ—Ç—å –Ω–æ–≤—É`);
      setTimeout(async function() {
        await msg.deleted({});
      }, 1000);
      return;
    }
  if (data == chats[chatId]) {
    await db.set('chatId', `${chatId}_win`, win + 1)
    await msg.update(`–í—ñ—Ç–∞—é, —Ç–∏ –≤—ñ–¥–≥–∞–¥–∞–≤ —á–∏—Å–ª–æ ${chats[chatId]}`, {
      replyMarkup: againOptions
    });
  } else {
    await db.set('chatId', `${chatId}_loss`, loss + 1);
    await msg.update(`–ù–∞ –∂–∞–ª—å, —Ç–∏ –Ω–µ –≤–≥–∞–¥–∞–≤, –±–æ—Ç –∑–∞–≥–∞–¥–∞–≤ —á–∏—Å–ª–æ ${chats[chatId]}`, {
      replyMarkup: againOptions
    });
    await delete chats[chatId];
  }
});

bot.login();